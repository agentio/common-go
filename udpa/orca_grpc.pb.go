// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: udpa/service/orca/v1/orca.proto

package udpa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenRcaService_StreamCoreMetrics_FullMethodName = "/udpa.service.orca.v1.OpenRcaService/StreamCoreMetrics"
)

// OpenRcaServiceClient is the client API for OpenRcaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Out-of-band (OOB) load reporting service for the additional load reporting
// agent that does not sit in the request path. Reports are periodically sampled
// with sufficient frequency to provide temporal association with requests.
// OOB reporting compensates the limitation of in-band reporting in revealing
// costs for backends that do not provide a steady stream of telemetry such as
// long running stream operations and zero QPS services. This is a server
// streaming service, client needs to terminate current RPC and initiate
// a new call to change backend reporting frequency.
type OpenRcaServiceClient interface {
	StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrcaLoadReport], error)
}

type openRcaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenRcaServiceClient(cc grpc.ClientConnInterface) OpenRcaServiceClient {
	return &openRcaServiceClient{cc}
}

func (c *openRcaServiceClient) StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrcaLoadReport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenRcaService_ServiceDesc.Streams[0], OpenRcaService_StreamCoreMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrcaLoadReportRequest, OrcaLoadReport]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenRcaService_StreamCoreMetricsClient = grpc.ServerStreamingClient[OrcaLoadReport]

// OpenRcaServiceServer is the server API for OpenRcaService service.
// All implementations must embed UnimplementedOpenRcaServiceServer
// for forward compatibility.
//
// Out-of-band (OOB) load reporting service for the additional load reporting
// agent that does not sit in the request path. Reports are periodically sampled
// with sufficient frequency to provide temporal association with requests.
// OOB reporting compensates the limitation of in-band reporting in revealing
// costs for backends that do not provide a steady stream of telemetry such as
// long running stream operations and zero QPS services. This is a server
// streaming service, client needs to terminate current RPC and initiate
// a new call to change backend reporting frequency.
type OpenRcaServiceServer interface {
	StreamCoreMetrics(*OrcaLoadReportRequest, grpc.ServerStreamingServer[OrcaLoadReport]) error
	mustEmbedUnimplementedOpenRcaServiceServer()
}

// UnimplementedOpenRcaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenRcaServiceServer struct{}

func (UnimplementedOpenRcaServiceServer) StreamCoreMetrics(*OrcaLoadReportRequest, grpc.ServerStreamingServer[OrcaLoadReport]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCoreMetrics not implemented")
}
func (UnimplementedOpenRcaServiceServer) mustEmbedUnimplementedOpenRcaServiceServer() {}
func (UnimplementedOpenRcaServiceServer) testEmbeddedByValue()                        {}

// UnsafeOpenRcaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenRcaServiceServer will
// result in compilation errors.
type UnsafeOpenRcaServiceServer interface {
	mustEmbedUnimplementedOpenRcaServiceServer()
}

func RegisterOpenRcaServiceServer(s grpc.ServiceRegistrar, srv OpenRcaServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpenRcaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenRcaService_ServiceDesc, srv)
}

func _OpenRcaService_StreamCoreMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrcaLoadReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenRcaServiceServer).StreamCoreMetrics(m, &grpc.GenericServerStream[OrcaLoadReportRequest, OrcaLoadReport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenRcaService_StreamCoreMetricsServer = grpc.ServerStreamingServer[OrcaLoadReport]

// OpenRcaService_ServiceDesc is the grpc.ServiceDesc for OpenRcaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenRcaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "udpa.service.orca.v1.OpenRcaService",
	HandlerType: (*OpenRcaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCoreMetrics",
			Handler:       _OpenRcaService_StreamCoreMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "udpa/service/orca/v1/orca.proto",
}
