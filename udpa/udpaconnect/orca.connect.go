// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: udpa/service/orca/v1/orca.proto

package udpaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	udpa "github.com/agentio/common-go/udpa"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OpenRcaServiceName is the fully-qualified name of the OpenRcaService service.
	OpenRcaServiceName = "udpa.service.orca.v1.OpenRcaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OpenRcaServiceStreamCoreMetricsProcedure is the fully-qualified name of the OpenRcaService's
	// StreamCoreMetrics RPC.
	OpenRcaServiceStreamCoreMetricsProcedure = "/udpa.service.orca.v1.OpenRcaService/StreamCoreMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	openRcaServiceServiceDescriptor                 = udpa.File_udpa_service_orca_v1_orca_proto.Services().ByName("OpenRcaService")
	openRcaServiceStreamCoreMetricsMethodDescriptor = openRcaServiceServiceDescriptor.Methods().ByName("StreamCoreMetrics")
)

// OpenRcaServiceClient is a client for the udpa.service.orca.v1.OpenRcaService service.
type OpenRcaServiceClient interface {
	StreamCoreMetrics(context.Context, *connect.Request[udpa.OrcaLoadReportRequest]) (*connect.ServerStreamForClient[udpa.OrcaLoadReport], error)
}

// NewOpenRcaServiceClient constructs a client for the udpa.service.orca.v1.OpenRcaService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOpenRcaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OpenRcaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &openRcaServiceClient{
		streamCoreMetrics: connect.NewClient[udpa.OrcaLoadReportRequest, udpa.OrcaLoadReport](
			httpClient,
			baseURL+OpenRcaServiceStreamCoreMetricsProcedure,
			connect.WithSchema(openRcaServiceStreamCoreMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// openRcaServiceClient implements OpenRcaServiceClient.
type openRcaServiceClient struct {
	streamCoreMetrics *connect.Client[udpa.OrcaLoadReportRequest, udpa.OrcaLoadReport]
}

// StreamCoreMetrics calls udpa.service.orca.v1.OpenRcaService.StreamCoreMetrics.
func (c *openRcaServiceClient) StreamCoreMetrics(ctx context.Context, req *connect.Request[udpa.OrcaLoadReportRequest]) (*connect.ServerStreamForClient[udpa.OrcaLoadReport], error) {
	return c.streamCoreMetrics.CallServerStream(ctx, req)
}

// OpenRcaServiceHandler is an implementation of the udpa.service.orca.v1.OpenRcaService service.
type OpenRcaServiceHandler interface {
	StreamCoreMetrics(context.Context, *connect.Request[udpa.OrcaLoadReportRequest], *connect.ServerStream[udpa.OrcaLoadReport]) error
}

// NewOpenRcaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOpenRcaServiceHandler(svc OpenRcaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	openRcaServiceStreamCoreMetricsHandler := connect.NewServerStreamHandler(
		OpenRcaServiceStreamCoreMetricsProcedure,
		svc.StreamCoreMetrics,
		connect.WithSchema(openRcaServiceStreamCoreMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/udpa.service.orca.v1.OpenRcaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OpenRcaServiceStreamCoreMetricsProcedure:
			openRcaServiceStreamCoreMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOpenRcaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOpenRcaServiceHandler struct{}

func (UnimplementedOpenRcaServiceHandler) StreamCoreMetrics(context.Context, *connect.Request[udpa.OrcaLoadReportRequest], *connect.ServerStream[udpa.OrcaLoadReport]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("udpa.service.orca.v1.OpenRcaService.StreamCoreMetrics is not implemented"))
}
