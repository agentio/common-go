// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/discovery/v2/ads.proto

package discoveryv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v21 "github.com/agentio/common-go/envoy/api/v2"
	v2 "github.com/agentio/common-go/envoy/service/discovery/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AggregatedDiscoveryServiceName is the fully-qualified name of the AggregatedDiscoveryService
	// service.
	AggregatedDiscoveryServiceName = "envoy.service.discovery.v2.AggregatedDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AggregatedDiscoveryServiceStreamAggregatedResourcesProcedure is the fully-qualified name of the
	// AggregatedDiscoveryService's StreamAggregatedResources RPC.
	AggregatedDiscoveryServiceStreamAggregatedResourcesProcedure = "/envoy.service.discovery.v2.AggregatedDiscoveryService/StreamAggregatedResources"
	// AggregatedDiscoveryServiceDeltaAggregatedResourcesProcedure is the fully-qualified name of the
	// AggregatedDiscoveryService's DeltaAggregatedResources RPC.
	AggregatedDiscoveryServiceDeltaAggregatedResourcesProcedure = "/envoy.service.discovery.v2.AggregatedDiscoveryService/DeltaAggregatedResources"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aggregatedDiscoveryServiceServiceDescriptor                         = v2.File_envoy_service_discovery_v2_ads_proto.Services().ByName("AggregatedDiscoveryService")
	aggregatedDiscoveryServiceStreamAggregatedResourcesMethodDescriptor = aggregatedDiscoveryServiceServiceDescriptor.Methods().ByName("StreamAggregatedResources")
	aggregatedDiscoveryServiceDeltaAggregatedResourcesMethodDescriptor  = aggregatedDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaAggregatedResources")
)

// AggregatedDiscoveryServiceClient is a client for the
// envoy.service.discovery.v2.AggregatedDiscoveryService service.
type AggregatedDiscoveryServiceClient interface {
	// This is a gRPC-only API.
	StreamAggregatedResources(context.Context) *connect.BidiStreamForClient[v21.DiscoveryRequest, v21.DiscoveryResponse]
	DeltaAggregatedResources(context.Context) *connect.BidiStreamForClient[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse]
}

// NewAggregatedDiscoveryServiceClient constructs a client for the
// envoy.service.discovery.v2.AggregatedDiscoveryService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAggregatedDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AggregatedDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aggregatedDiscoveryServiceClient{
		streamAggregatedResources: connect.NewClient[v21.DiscoveryRequest, v21.DiscoveryResponse](
			httpClient,
			baseURL+AggregatedDiscoveryServiceStreamAggregatedResourcesProcedure,
			connect.WithSchema(aggregatedDiscoveryServiceStreamAggregatedResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deltaAggregatedResources: connect.NewClient[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse](
			httpClient,
			baseURL+AggregatedDiscoveryServiceDeltaAggregatedResourcesProcedure,
			connect.WithSchema(aggregatedDiscoveryServiceDeltaAggregatedResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aggregatedDiscoveryServiceClient implements AggregatedDiscoveryServiceClient.
type aggregatedDiscoveryServiceClient struct {
	streamAggregatedResources *connect.Client[v21.DiscoveryRequest, v21.DiscoveryResponse]
	deltaAggregatedResources  *connect.Client[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse]
}

// StreamAggregatedResources calls
// envoy.service.discovery.v2.AggregatedDiscoveryService.StreamAggregatedResources.
func (c *aggregatedDiscoveryServiceClient) StreamAggregatedResources(ctx context.Context) *connect.BidiStreamForClient[v21.DiscoveryRequest, v21.DiscoveryResponse] {
	return c.streamAggregatedResources.CallBidiStream(ctx)
}

// DeltaAggregatedResources calls
// envoy.service.discovery.v2.AggregatedDiscoveryService.DeltaAggregatedResources.
func (c *aggregatedDiscoveryServiceClient) DeltaAggregatedResources(ctx context.Context) *connect.BidiStreamForClient[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse] {
	return c.deltaAggregatedResources.CallBidiStream(ctx)
}

// AggregatedDiscoveryServiceHandler is an implementation of the
// envoy.service.discovery.v2.AggregatedDiscoveryService service.
type AggregatedDiscoveryServiceHandler interface {
	// This is a gRPC-only API.
	StreamAggregatedResources(context.Context, *connect.BidiStream[v21.DiscoveryRequest, v21.DiscoveryResponse]) error
	DeltaAggregatedResources(context.Context, *connect.BidiStream[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse]) error
}

// NewAggregatedDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAggregatedDiscoveryServiceHandler(svc AggregatedDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aggregatedDiscoveryServiceStreamAggregatedResourcesHandler := connect.NewBidiStreamHandler(
		AggregatedDiscoveryServiceStreamAggregatedResourcesProcedure,
		svc.StreamAggregatedResources,
		connect.WithSchema(aggregatedDiscoveryServiceStreamAggregatedResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aggregatedDiscoveryServiceDeltaAggregatedResourcesHandler := connect.NewBidiStreamHandler(
		AggregatedDiscoveryServiceDeltaAggregatedResourcesProcedure,
		svc.DeltaAggregatedResources,
		connect.WithSchema(aggregatedDiscoveryServiceDeltaAggregatedResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.discovery.v2.AggregatedDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AggregatedDiscoveryServiceStreamAggregatedResourcesProcedure:
			aggregatedDiscoveryServiceStreamAggregatedResourcesHandler.ServeHTTP(w, r)
		case AggregatedDiscoveryServiceDeltaAggregatedResourcesProcedure:
			aggregatedDiscoveryServiceDeltaAggregatedResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAggregatedDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAggregatedDiscoveryServiceHandler struct{}

func (UnimplementedAggregatedDiscoveryServiceHandler) StreamAggregatedResources(context.Context, *connect.BidiStream[v21.DiscoveryRequest, v21.DiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.discovery.v2.AggregatedDiscoveryService.StreamAggregatedResources is not implemented"))
}

func (UnimplementedAggregatedDiscoveryServiceHandler) DeltaAggregatedResources(context.Context, *connect.BidiStream[v21.DeltaDiscoveryRequest, v21.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.discovery.v2.AggregatedDiscoveryService.DeltaAggregatedResources is not implemented"))
}
