// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: envoy/service/discovery/v2/sds.proto

package discoveryv2

import (
	context "context"
	v2 "github.com/agentio/common-go/envoy/api/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretDiscoveryService_DeltaSecrets_FullMethodName  = "/envoy.service.discovery.v2.SecretDiscoveryService/DeltaSecrets"
	SecretDiscoveryService_StreamSecrets_FullMethodName = "/envoy.service.discovery.v2.SecretDiscoveryService/StreamSecrets"
	SecretDiscoveryService_FetchSecrets_FullMethodName  = "/envoy.service.discovery.v2.SecretDiscoveryService/FetchSecrets"
)

// SecretDiscoveryServiceClient is the client API for SecretDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretDiscoveryServiceClient interface {
	DeltaSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse], error)
	StreamSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse], error)
	FetchSecrets(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type secretDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretDiscoveryServiceClient(cc grpc.ClientConnInterface) SecretDiscoveryServiceClient {
	return &secretDiscoveryServiceClient{cc}
}

func (c *secretDiscoveryServiceClient) DeltaSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretDiscoveryService_ServiceDesc.Streams[0], SecretDiscoveryService_DeltaSecrets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretDiscoveryService_DeltaSecretsClient = grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]

func (c *secretDiscoveryServiceClient) StreamSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretDiscoveryService_ServiceDesc.Streams[1], SecretDiscoveryService_StreamSecrets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v2.DiscoveryRequest, v2.DiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretDiscoveryService_StreamSecretsClient = grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse]

func (c *secretDiscoveryServiceClient) FetchSecrets(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, SecretDiscoveryService_FetchSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretDiscoveryServiceServer is the server API for SecretDiscoveryService service.
// All implementations must embed UnimplementedSecretDiscoveryServiceServer
// for forward compatibility.
type SecretDiscoveryServiceServer interface {
	DeltaSecrets(grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error
	StreamSecrets(grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]) error
	FetchSecrets(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
	mustEmbedUnimplementedSecretDiscoveryServiceServer()
}

// UnimplementedSecretDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretDiscoveryServiceServer struct{}

func (UnimplementedSecretDiscoveryServiceServer) DeltaSecrets(grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeltaSecrets not implemented")
}
func (UnimplementedSecretDiscoveryServiceServer) StreamSecrets(grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSecrets not implemented")
}
func (UnimplementedSecretDiscoveryServiceServer) FetchSecrets(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSecrets not implemented")
}
func (UnimplementedSecretDiscoveryServiceServer) mustEmbedUnimplementedSecretDiscoveryServiceServer() {
}
func (UnimplementedSecretDiscoveryServiceServer) testEmbeddedByValue() {}

// UnsafeSecretDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretDiscoveryServiceServer will
// result in compilation errors.
type UnsafeSecretDiscoveryServiceServer interface {
	mustEmbedUnimplementedSecretDiscoveryServiceServer()
}

func RegisterSecretDiscoveryServiceServer(s grpc.ServiceRegistrar, srv SecretDiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretDiscoveryService_ServiceDesc, srv)
}

func _SecretDiscoveryService_DeltaSecrets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretDiscoveryServiceServer).DeltaSecrets(&grpc.GenericServerStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretDiscoveryService_DeltaSecretsServer = grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]

func _SecretDiscoveryService_StreamSecrets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretDiscoveryServiceServer).StreamSecrets(&grpc.GenericServerStream[v2.DiscoveryRequest, v2.DiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretDiscoveryService_StreamSecretsServer = grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]

func _SecretDiscoveryService_FetchSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretDiscoveryServiceServer).FetchSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretDiscoveryService_FetchSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretDiscoveryServiceServer).FetchSecrets(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretDiscoveryService_ServiceDesc is the grpc.ServiceDesc for SecretDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.discovery.v2.SecretDiscoveryService",
	HandlerType: (*SecretDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchSecrets",
			Handler:    _SecretDiscoveryService_FetchSecrets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeltaSecrets",
			Handler:       _SecretDiscoveryService_DeltaSecrets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSecrets",
			Handler:       _SecretDiscoveryService_StreamSecrets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/discovery/v2/sds.proto",
}
