// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: envoy/service/discovery/v2/rtds.proto

package discoveryv2

import (
	context "context"
	v2 "github.com/agentio/common-go/envoy/api/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuntimeDiscoveryService_StreamRuntime_FullMethodName = "/envoy.service.discovery.v2.RuntimeDiscoveryService/StreamRuntime"
	RuntimeDiscoveryService_DeltaRuntime_FullMethodName  = "/envoy.service.discovery.v2.RuntimeDiscoveryService/DeltaRuntime"
	RuntimeDiscoveryService_FetchRuntime_FullMethodName  = "/envoy.service.discovery.v2.RuntimeDiscoveryService/FetchRuntime"
)

// RuntimeDiscoveryServiceClient is the client API for RuntimeDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Discovery service for Runtime resources.
type RuntimeDiscoveryServiceClient interface {
	StreamRuntime(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse], error)
	DeltaRuntime(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse], error)
	FetchRuntime(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type runtimeDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeDiscoveryServiceClient(cc grpc.ClientConnInterface) RuntimeDiscoveryServiceClient {
	return &runtimeDiscoveryServiceClient{cc}
}

func (c *runtimeDiscoveryServiceClient) StreamRuntime(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RuntimeDiscoveryService_ServiceDesc.Streams[0], RuntimeDiscoveryService_StreamRuntime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v2.DiscoveryRequest, v2.DiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeDiscoveryService_StreamRuntimeClient = grpc.BidiStreamingClient[v2.DiscoveryRequest, v2.DiscoveryResponse]

func (c *runtimeDiscoveryServiceClient) DeltaRuntime(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RuntimeDiscoveryService_ServiceDesc.Streams[1], RuntimeDiscoveryService_DeltaRuntime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeDiscoveryService_DeltaRuntimeClient = grpc.BidiStreamingClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]

func (c *runtimeDiscoveryServiceClient) FetchRuntime(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, RuntimeDiscoveryService_FetchRuntime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeDiscoveryServiceServer is the server API for RuntimeDiscoveryService service.
// All implementations must embed UnimplementedRuntimeDiscoveryServiceServer
// for forward compatibility.
//
// Discovery service for Runtime resources.
type RuntimeDiscoveryServiceServer interface {
	StreamRuntime(grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]) error
	DeltaRuntime(grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error
	FetchRuntime(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
	mustEmbedUnimplementedRuntimeDiscoveryServiceServer()
}

// UnimplementedRuntimeDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeDiscoveryServiceServer struct{}

func (UnimplementedRuntimeDiscoveryServiceServer) StreamRuntime(grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRuntime not implemented")
}
func (UnimplementedRuntimeDiscoveryServiceServer) DeltaRuntime(grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeltaRuntime not implemented")
}
func (UnimplementedRuntimeDiscoveryServiceServer) FetchRuntime(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRuntime not implemented")
}
func (UnimplementedRuntimeDiscoveryServiceServer) mustEmbedUnimplementedRuntimeDiscoveryServiceServer() {
}
func (UnimplementedRuntimeDiscoveryServiceServer) testEmbeddedByValue() {}

// UnsafeRuntimeDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeDiscoveryServiceServer will
// result in compilation errors.
type UnsafeRuntimeDiscoveryServiceServer interface {
	mustEmbedUnimplementedRuntimeDiscoveryServiceServer()
}

func RegisterRuntimeDiscoveryServiceServer(s grpc.ServiceRegistrar, srv RuntimeDiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuntimeDiscoveryService_ServiceDesc, srv)
}

func _RuntimeDiscoveryService_StreamRuntime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeDiscoveryServiceServer).StreamRuntime(&grpc.GenericServerStream[v2.DiscoveryRequest, v2.DiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeDiscoveryService_StreamRuntimeServer = grpc.BidiStreamingServer[v2.DiscoveryRequest, v2.DiscoveryResponse]

func _RuntimeDiscoveryService_DeltaRuntime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeDiscoveryServiceServer).DeltaRuntime(&grpc.GenericServerStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeDiscoveryService_DeltaRuntimeServer = grpc.BidiStreamingServer[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]

func _RuntimeDiscoveryService_FetchRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeDiscoveryServiceServer).FetchRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeDiscoveryService_FetchRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeDiscoveryServiceServer).FetchRuntime(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeDiscoveryService_ServiceDesc is the grpc.ServiceDesc for RuntimeDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.discovery.v2.RuntimeDiscoveryService",
	HandlerType: (*RuntimeDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchRuntime",
			Handler:    _RuntimeDiscoveryService_FetchRuntime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRuntime",
			Handler:       _RuntimeDiscoveryService_StreamRuntime_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaRuntime",
			Handler:       _RuntimeDiscoveryService_DeltaRuntime_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/discovery/v2/rtds.proto",
}
