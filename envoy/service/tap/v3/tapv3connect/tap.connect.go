// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/tap/v3/tap.proto

package tapv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v3 "github.com/agentio/common-go/envoy/service/tap/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TapSinkServiceName is the fully-qualified name of the TapSinkService service.
	TapSinkServiceName = "envoy.service.tap.v3.TapSinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TapSinkServiceStreamTapsProcedure is the fully-qualified name of the TapSinkService's StreamTaps
	// RPC.
	TapSinkServiceStreamTapsProcedure = "/envoy.service.tap.v3.TapSinkService/StreamTaps"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tapSinkServiceServiceDescriptor          = v3.File_envoy_service_tap_v3_tap_proto.Services().ByName("TapSinkService")
	tapSinkServiceStreamTapsMethodDescriptor = tapSinkServiceServiceDescriptor.Methods().ByName("StreamTaps")
)

// TapSinkServiceClient is a client for the envoy.service.tap.v3.TapSinkService service.
type TapSinkServiceClient interface {
	// Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure. The server should
	// disconnect if it expects Envoy to reconnect.
	StreamTaps(context.Context) *connect.ClientStreamForClient[v3.StreamTapsRequest, v3.StreamTapsResponse]
}

// NewTapSinkServiceClient constructs a client for the envoy.service.tap.v3.TapSinkService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTapSinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TapSinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tapSinkServiceClient{
		streamTaps: connect.NewClient[v3.StreamTapsRequest, v3.StreamTapsResponse](
			httpClient,
			baseURL+TapSinkServiceStreamTapsProcedure,
			connect.WithSchema(tapSinkServiceStreamTapsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tapSinkServiceClient implements TapSinkServiceClient.
type tapSinkServiceClient struct {
	streamTaps *connect.Client[v3.StreamTapsRequest, v3.StreamTapsResponse]
}

// StreamTaps calls envoy.service.tap.v3.TapSinkService.StreamTaps.
func (c *tapSinkServiceClient) StreamTaps(ctx context.Context) *connect.ClientStreamForClient[v3.StreamTapsRequest, v3.StreamTapsResponse] {
	return c.streamTaps.CallClientStream(ctx)
}

// TapSinkServiceHandler is an implementation of the envoy.service.tap.v3.TapSinkService service.
type TapSinkServiceHandler interface {
	// Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure. The server should
	// disconnect if it expects Envoy to reconnect.
	StreamTaps(context.Context, *connect.ClientStream[v3.StreamTapsRequest]) (*connect.Response[v3.StreamTapsResponse], error)
}

// NewTapSinkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTapSinkServiceHandler(svc TapSinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tapSinkServiceStreamTapsHandler := connect.NewClientStreamHandler(
		TapSinkServiceStreamTapsProcedure,
		svc.StreamTaps,
		connect.WithSchema(tapSinkServiceStreamTapsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.tap.v3.TapSinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TapSinkServiceStreamTapsProcedure:
			tapSinkServiceStreamTapsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTapSinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTapSinkServiceHandler struct{}

func (UnimplementedTapSinkServiceHandler) StreamTaps(context.Context, *connect.ClientStream[v3.StreamTapsRequest]) (*connect.Response[v3.StreamTapsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.tap.v3.TapSinkService.StreamTaps is not implemented"))
}
