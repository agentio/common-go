// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/metrics/v2/metrics_service.proto

package metricsv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/agentio/common-go/envoy/service/metrics/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetricsServiceName is the fully-qualified name of the MetricsService service.
	MetricsServiceName = "envoy.service.metrics.v2.MetricsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetricsServiceStreamMetricsProcedure is the fully-qualified name of the MetricsService's
	// StreamMetrics RPC.
	MetricsServiceStreamMetricsProcedure = "/envoy.service.metrics.v2.MetricsService/StreamMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	metricsServiceServiceDescriptor             = v2.File_envoy_service_metrics_v2_metrics_service_proto.Services().ByName("MetricsService")
	metricsServiceStreamMetricsMethodDescriptor = metricsServiceServiceDescriptor.Methods().ByName("StreamMetrics")
)

// MetricsServiceClient is a client for the envoy.service.metrics.v2.MetricsService service.
type MetricsServiceClient interface {
	// Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure.
	StreamMetrics(context.Context) *connect.ClientStreamForClient[v2.StreamMetricsMessage, v2.StreamMetricsResponse]
}

// NewMetricsServiceClient constructs a client for the envoy.service.metrics.v2.MetricsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetricsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metricsServiceClient{
		streamMetrics: connect.NewClient[v2.StreamMetricsMessage, v2.StreamMetricsResponse](
			httpClient,
			baseURL+MetricsServiceStreamMetricsProcedure,
			connect.WithSchema(metricsServiceStreamMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// metricsServiceClient implements MetricsServiceClient.
type metricsServiceClient struct {
	streamMetrics *connect.Client[v2.StreamMetricsMessage, v2.StreamMetricsResponse]
}

// StreamMetrics calls envoy.service.metrics.v2.MetricsService.StreamMetrics.
func (c *metricsServiceClient) StreamMetrics(ctx context.Context) *connect.ClientStreamForClient[v2.StreamMetricsMessage, v2.StreamMetricsResponse] {
	return c.streamMetrics.CallClientStream(ctx)
}

// MetricsServiceHandler is an implementation of the envoy.service.metrics.v2.MetricsService
// service.
type MetricsServiceHandler interface {
	// Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure.
	StreamMetrics(context.Context, *connect.ClientStream[v2.StreamMetricsMessage]) (*connect.Response[v2.StreamMetricsResponse], error)
}

// NewMetricsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsServiceHandler(svc MetricsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metricsServiceStreamMetricsHandler := connect.NewClientStreamHandler(
		MetricsServiceStreamMetricsProcedure,
		svc.StreamMetrics,
		connect.WithSchema(metricsServiceStreamMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.metrics.v2.MetricsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetricsServiceStreamMetricsProcedure:
			metricsServiceStreamMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetricsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsServiceHandler struct{}

func (UnimplementedMetricsServiceHandler) StreamMetrics(context.Context, *connect.ClientStream[v2.StreamMetricsMessage]) (*connect.Response[v2.StreamMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.metrics.v2.MetricsService.StreamMetrics is not implemented"))
}
