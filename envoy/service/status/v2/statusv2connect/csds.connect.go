// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/status/v2/csds.proto

package statusv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/agentio/common-go/envoy/service/status/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClientStatusDiscoveryServiceName is the fully-qualified name of the ClientStatusDiscoveryService
	// service.
	ClientStatusDiscoveryServiceName = "envoy.service.status.v2.ClientStatusDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientStatusDiscoveryServiceStreamClientStatusProcedure is the fully-qualified name of the
	// ClientStatusDiscoveryService's StreamClientStatus RPC.
	ClientStatusDiscoveryServiceStreamClientStatusProcedure = "/envoy.service.status.v2.ClientStatusDiscoveryService/StreamClientStatus"
	// ClientStatusDiscoveryServiceFetchClientStatusProcedure is the fully-qualified name of the
	// ClientStatusDiscoveryService's FetchClientStatus RPC.
	ClientStatusDiscoveryServiceFetchClientStatusProcedure = "/envoy.service.status.v2.ClientStatusDiscoveryService/FetchClientStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	clientStatusDiscoveryServiceServiceDescriptor                  = v2.File_envoy_service_status_v2_csds_proto.Services().ByName("ClientStatusDiscoveryService")
	clientStatusDiscoveryServiceStreamClientStatusMethodDescriptor = clientStatusDiscoveryServiceServiceDescriptor.Methods().ByName("StreamClientStatus")
	clientStatusDiscoveryServiceFetchClientStatusMethodDescriptor  = clientStatusDiscoveryServiceServiceDescriptor.Methods().ByName("FetchClientStatus")
)

// ClientStatusDiscoveryServiceClient is a client for the
// envoy.service.status.v2.ClientStatusDiscoveryService service.
type ClientStatusDiscoveryServiceClient interface {
	StreamClientStatus(context.Context) *connect.BidiStreamForClient[v2.ClientStatusRequest, v2.ClientStatusResponse]
	FetchClientStatus(context.Context, *connect.Request[v2.ClientStatusRequest]) (*connect.Response[v2.ClientStatusResponse], error)
}

// NewClientStatusDiscoveryServiceClient constructs a client for the
// envoy.service.status.v2.ClientStatusDiscoveryService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientStatusDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientStatusDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clientStatusDiscoveryServiceClient{
		streamClientStatus: connect.NewClient[v2.ClientStatusRequest, v2.ClientStatusResponse](
			httpClient,
			baseURL+ClientStatusDiscoveryServiceStreamClientStatusProcedure,
			connect.WithSchema(clientStatusDiscoveryServiceStreamClientStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchClientStatus: connect.NewClient[v2.ClientStatusRequest, v2.ClientStatusResponse](
			httpClient,
			baseURL+ClientStatusDiscoveryServiceFetchClientStatusProcedure,
			connect.WithSchema(clientStatusDiscoveryServiceFetchClientStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// clientStatusDiscoveryServiceClient implements ClientStatusDiscoveryServiceClient.
type clientStatusDiscoveryServiceClient struct {
	streamClientStatus *connect.Client[v2.ClientStatusRequest, v2.ClientStatusResponse]
	fetchClientStatus  *connect.Client[v2.ClientStatusRequest, v2.ClientStatusResponse]
}

// StreamClientStatus calls envoy.service.status.v2.ClientStatusDiscoveryService.StreamClientStatus.
func (c *clientStatusDiscoveryServiceClient) StreamClientStatus(ctx context.Context) *connect.BidiStreamForClient[v2.ClientStatusRequest, v2.ClientStatusResponse] {
	return c.streamClientStatus.CallBidiStream(ctx)
}

// FetchClientStatus calls envoy.service.status.v2.ClientStatusDiscoveryService.FetchClientStatus.
func (c *clientStatusDiscoveryServiceClient) FetchClientStatus(ctx context.Context, req *connect.Request[v2.ClientStatusRequest]) (*connect.Response[v2.ClientStatusResponse], error) {
	return c.fetchClientStatus.CallUnary(ctx, req)
}

// ClientStatusDiscoveryServiceHandler is an implementation of the
// envoy.service.status.v2.ClientStatusDiscoveryService service.
type ClientStatusDiscoveryServiceHandler interface {
	StreamClientStatus(context.Context, *connect.BidiStream[v2.ClientStatusRequest, v2.ClientStatusResponse]) error
	FetchClientStatus(context.Context, *connect.Request[v2.ClientStatusRequest]) (*connect.Response[v2.ClientStatusResponse], error)
}

// NewClientStatusDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientStatusDiscoveryServiceHandler(svc ClientStatusDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientStatusDiscoveryServiceStreamClientStatusHandler := connect.NewBidiStreamHandler(
		ClientStatusDiscoveryServiceStreamClientStatusProcedure,
		svc.StreamClientStatus,
		connect.WithSchema(clientStatusDiscoveryServiceStreamClientStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clientStatusDiscoveryServiceFetchClientStatusHandler := connect.NewUnaryHandler(
		ClientStatusDiscoveryServiceFetchClientStatusProcedure,
		svc.FetchClientStatus,
		connect.WithSchema(clientStatusDiscoveryServiceFetchClientStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.status.v2.ClientStatusDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientStatusDiscoveryServiceStreamClientStatusProcedure:
			clientStatusDiscoveryServiceStreamClientStatusHandler.ServeHTTP(w, r)
		case ClientStatusDiscoveryServiceFetchClientStatusProcedure:
			clientStatusDiscoveryServiceFetchClientStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientStatusDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClientStatusDiscoveryServiceHandler struct{}

func (UnimplementedClientStatusDiscoveryServiceHandler) StreamClientStatus(context.Context, *connect.BidiStream[v2.ClientStatusRequest, v2.ClientStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.status.v2.ClientStatusDiscoveryService.StreamClientStatus is not implemented"))
}

func (UnimplementedClientStatusDiscoveryServiceHandler) FetchClientStatus(context.Context, *connect.Request[v2.ClientStatusRequest]) (*connect.Response[v2.ClientStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.status.v2.ClientStatusDiscoveryService.FetchClientStatus is not implemented"))
}
