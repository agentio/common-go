// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/health/v3/hds.proto

package healthv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v3 "github.com/agentio/common-go/envoy/service/health/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthDiscoveryServiceName is the fully-qualified name of the HealthDiscoveryService service.
	HealthDiscoveryServiceName = "envoy.service.health.v3.HealthDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthDiscoveryServiceStreamHealthCheckProcedure is the fully-qualified name of the
	// HealthDiscoveryService's StreamHealthCheck RPC.
	HealthDiscoveryServiceStreamHealthCheckProcedure = "/envoy.service.health.v3.HealthDiscoveryService/StreamHealthCheck"
	// HealthDiscoveryServiceFetchHealthCheckProcedure is the fully-qualified name of the
	// HealthDiscoveryService's FetchHealthCheck RPC.
	HealthDiscoveryServiceFetchHealthCheckProcedure = "/envoy.service.health.v3.HealthDiscoveryService/FetchHealthCheck"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	healthDiscoveryServiceServiceDescriptor                 = v3.File_envoy_service_health_v3_hds_proto.Services().ByName("HealthDiscoveryService")
	healthDiscoveryServiceStreamHealthCheckMethodDescriptor = healthDiscoveryServiceServiceDescriptor.Methods().ByName("StreamHealthCheck")
	healthDiscoveryServiceFetchHealthCheckMethodDescriptor  = healthDiscoveryServiceServiceDescriptor.Methods().ByName("FetchHealthCheck")
)

// HealthDiscoveryServiceClient is a client for the envoy.service.health.v3.HealthDiscoveryService
// service.
type HealthDiscoveryServiceClient interface {
	//  1. Envoy starts up and if its can_healthcheck option in the static
	//     bootstrap config is enabled, sends HealthCheckRequest to the management
	//     server. It supplies its capabilities (which protocol it can health check
	//     with, what zone it resides in, etc.).
	//  2. In response to (1), the management server designates this Envoy as a
	//     healthchecker to health check a subset of all upstream hosts for a given
	//     cluster (for example upstream Host 1 and Host 2). It streams
	//     HealthCheckSpecifier messages with cluster related configuration for all
	//     clusters this Envoy is designated to health check. Subsequent
	//     HealthCheckSpecifier message will be sent on changes to:
	//     a. Endpoints to health checks
	//     b. Per cluster configuration change
	//  3. Envoy creates a health probe based on the HealthCheck config and sends
	//     it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
	//     configuration Envoy waits upon the arrival of the probe response and
	//     looks at the content of the response to decide whether the endpoint is
	//     healthy or not. If a response hasn't been received within the timeout
	//     interval, the endpoint health status is considered TIMEOUT.
	//  4. Envoy reports results back in an EndpointHealthResponse message.
	//     Envoy streams responses as often as the interval configured by the
	//     management server in HealthCheckSpecifier.
	//  5. The management Server collects health statuses for all endpoints in the
	//     cluster (for all clusters) and uses this information to construct
	//     EndpointDiscoveryResponse messages.
	//  6. Once Envoy has a list of upstream endpoints to send traffic to, it load
	//     balances traffic to them without additional health checking. It may
	//     use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
	//     failed to a particular endpoint to account for health status propagation
	//     delay between HDS and EDS).
	//
	// By default, can_healthcheck is true. If can_healthcheck is false, Cluster
	// configuration may not contain HealthCheck message.
	// TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
	// invariant?
	// TODO(htuch): Add @amb67's diagram.
	StreamHealthCheck(context.Context) *connect.BidiStreamForClient[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier]
	// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
	// request/response. Should we add an identifier to the HealthCheckSpecifier
	// to bind with the response?
	FetchHealthCheck(context.Context, *connect.Request[v3.HealthCheckRequestOrEndpointHealthResponse]) (*connect.Response[v3.HealthCheckSpecifier], error)
}

// NewHealthDiscoveryServiceClient constructs a client for the
// envoy.service.health.v3.HealthDiscoveryService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthDiscoveryServiceClient{
		streamHealthCheck: connect.NewClient[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier](
			httpClient,
			baseURL+HealthDiscoveryServiceStreamHealthCheckProcedure,
			connect.WithSchema(healthDiscoveryServiceStreamHealthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchHealthCheck: connect.NewClient[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier](
			httpClient,
			baseURL+HealthDiscoveryServiceFetchHealthCheckProcedure,
			connect.WithSchema(healthDiscoveryServiceFetchHealthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthDiscoveryServiceClient implements HealthDiscoveryServiceClient.
type healthDiscoveryServiceClient struct {
	streamHealthCheck *connect.Client[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier]
	fetchHealthCheck  *connect.Client[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier]
}

// StreamHealthCheck calls envoy.service.health.v3.HealthDiscoveryService.StreamHealthCheck.
func (c *healthDiscoveryServiceClient) StreamHealthCheck(ctx context.Context) *connect.BidiStreamForClient[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier] {
	return c.streamHealthCheck.CallBidiStream(ctx)
}

// FetchHealthCheck calls envoy.service.health.v3.HealthDiscoveryService.FetchHealthCheck.
func (c *healthDiscoveryServiceClient) FetchHealthCheck(ctx context.Context, req *connect.Request[v3.HealthCheckRequestOrEndpointHealthResponse]) (*connect.Response[v3.HealthCheckSpecifier], error) {
	return c.fetchHealthCheck.CallUnary(ctx, req)
}

// HealthDiscoveryServiceHandler is an implementation of the
// envoy.service.health.v3.HealthDiscoveryService service.
type HealthDiscoveryServiceHandler interface {
	//  1. Envoy starts up and if its can_healthcheck option in the static
	//     bootstrap config is enabled, sends HealthCheckRequest to the management
	//     server. It supplies its capabilities (which protocol it can health check
	//     with, what zone it resides in, etc.).
	//  2. In response to (1), the management server designates this Envoy as a
	//     healthchecker to health check a subset of all upstream hosts for a given
	//     cluster (for example upstream Host 1 and Host 2). It streams
	//     HealthCheckSpecifier messages with cluster related configuration for all
	//     clusters this Envoy is designated to health check. Subsequent
	//     HealthCheckSpecifier message will be sent on changes to:
	//     a. Endpoints to health checks
	//     b. Per cluster configuration change
	//  3. Envoy creates a health probe based on the HealthCheck config and sends
	//     it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
	//     configuration Envoy waits upon the arrival of the probe response and
	//     looks at the content of the response to decide whether the endpoint is
	//     healthy or not. If a response hasn't been received within the timeout
	//     interval, the endpoint health status is considered TIMEOUT.
	//  4. Envoy reports results back in an EndpointHealthResponse message.
	//     Envoy streams responses as often as the interval configured by the
	//     management server in HealthCheckSpecifier.
	//  5. The management Server collects health statuses for all endpoints in the
	//     cluster (for all clusters) and uses this information to construct
	//     EndpointDiscoveryResponse messages.
	//  6. Once Envoy has a list of upstream endpoints to send traffic to, it load
	//     balances traffic to them without additional health checking. It may
	//     use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
	//     failed to a particular endpoint to account for health status propagation
	//     delay between HDS and EDS).
	//
	// By default, can_healthcheck is true. If can_healthcheck is false, Cluster
	// configuration may not contain HealthCheck message.
	// TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
	// invariant?
	// TODO(htuch): Add @amb67's diagram.
	StreamHealthCheck(context.Context, *connect.BidiStream[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier]) error
	// TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
	// request/response. Should we add an identifier to the HealthCheckSpecifier
	// to bind with the response?
	FetchHealthCheck(context.Context, *connect.Request[v3.HealthCheckRequestOrEndpointHealthResponse]) (*connect.Response[v3.HealthCheckSpecifier], error)
}

// NewHealthDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthDiscoveryServiceHandler(svc HealthDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthDiscoveryServiceStreamHealthCheckHandler := connect.NewBidiStreamHandler(
		HealthDiscoveryServiceStreamHealthCheckProcedure,
		svc.StreamHealthCheck,
		connect.WithSchema(healthDiscoveryServiceStreamHealthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	healthDiscoveryServiceFetchHealthCheckHandler := connect.NewUnaryHandler(
		HealthDiscoveryServiceFetchHealthCheckProcedure,
		svc.FetchHealthCheck,
		connect.WithSchema(healthDiscoveryServiceFetchHealthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.health.v3.HealthDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthDiscoveryServiceStreamHealthCheckProcedure:
			healthDiscoveryServiceStreamHealthCheckHandler.ServeHTTP(w, r)
		case HealthDiscoveryServiceFetchHealthCheckProcedure:
			healthDiscoveryServiceFetchHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthDiscoveryServiceHandler struct{}

func (UnimplementedHealthDiscoveryServiceHandler) StreamHealthCheck(context.Context, *connect.BidiStream[v3.HealthCheckRequestOrEndpointHealthResponse, v3.HealthCheckSpecifier]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.health.v3.HealthDiscoveryService.StreamHealthCheck is not implemented"))
}

func (UnimplementedHealthDiscoveryServiceHandler) FetchHealthCheck(context.Context, *connect.Request[v3.HealthCheckRequestOrEndpointHealthResponse]) (*connect.Response[v3.HealthCheckSpecifier], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.health.v3.HealthDiscoveryService.FetchHealthCheck is not implemented"))
}
