// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/trace/v3/trace_service.proto

package tracev3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v3 "github.com/agentio/common-go/envoy/service/trace/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TraceServiceName is the fully-qualified name of the TraceService service.
	TraceServiceName = "envoy.service.trace.v3.TraceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TraceServiceStreamTracesProcedure is the fully-qualified name of the TraceService's StreamTraces
	// RPC.
	TraceServiceStreamTracesProcedure = "/envoy.service.trace.v3.TraceService/StreamTraces"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	traceServiceServiceDescriptor            = v3.File_envoy_service_trace_v3_trace_service_proto.Services().ByName("TraceService")
	traceServiceStreamTracesMethodDescriptor = traceServiceServiceDescriptor.Methods().ByName("StreamTraces")
)

// TraceServiceClient is a client for the envoy.service.trace.v3.TraceService service.
type TraceServiceClient interface {
	// Envoy will connect and send StreamTracesMessage messages forever. It does
	// not expect any response to be sent as nothing would be done in the case
	// of failure.
	StreamTraces(context.Context) *connect.ClientStreamForClient[v3.StreamTracesMessage, v3.StreamTracesResponse]
}

// NewTraceServiceClient constructs a client for the envoy.service.trace.v3.TraceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTraceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TraceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &traceServiceClient{
		streamTraces: connect.NewClient[v3.StreamTracesMessage, v3.StreamTracesResponse](
			httpClient,
			baseURL+TraceServiceStreamTracesProcedure,
			connect.WithSchema(traceServiceStreamTracesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// traceServiceClient implements TraceServiceClient.
type traceServiceClient struct {
	streamTraces *connect.Client[v3.StreamTracesMessage, v3.StreamTracesResponse]
}

// StreamTraces calls envoy.service.trace.v3.TraceService.StreamTraces.
func (c *traceServiceClient) StreamTraces(ctx context.Context) *connect.ClientStreamForClient[v3.StreamTracesMessage, v3.StreamTracesResponse] {
	return c.streamTraces.CallClientStream(ctx)
}

// TraceServiceHandler is an implementation of the envoy.service.trace.v3.TraceService service.
type TraceServiceHandler interface {
	// Envoy will connect and send StreamTracesMessage messages forever. It does
	// not expect any response to be sent as nothing would be done in the case
	// of failure.
	StreamTraces(context.Context, *connect.ClientStream[v3.StreamTracesMessage]) (*connect.Response[v3.StreamTracesResponse], error)
}

// NewTraceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTraceServiceHandler(svc TraceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	traceServiceStreamTracesHandler := connect.NewClientStreamHandler(
		TraceServiceStreamTracesProcedure,
		svc.StreamTraces,
		connect.WithSchema(traceServiceStreamTracesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.trace.v3.TraceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TraceServiceStreamTracesProcedure:
			traceServiceStreamTracesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTraceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTraceServiceHandler struct{}

func (UnimplementedTraceServiceHandler) StreamTraces(context.Context, *connect.ClientStream[v3.StreamTracesMessage]) (*connect.Response[v3.StreamTracesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.trace.v3.TraceService.StreamTraces is not implemented"))
}
