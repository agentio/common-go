// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: envoy/service/accesslog/v2/als.proto

package accesslogv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessLogService_StreamAccessLogs_FullMethodName = "/envoy.service.accesslog.v2.AccessLogService/StreamAccessLogs"
)

// AccessLogServiceClient is the client API for AccessLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for streaming access logs from Envoy to an access log server.
type AccessLogServiceClient interface {
	// Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure. The server should
	// disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
	// API for "critical" access logs in which Envoy will buffer access logs for some period of time
	// until it gets an ACK so it could then retry. This API is designed for high throughput with the
	// expectation that it might be lossy.
	StreamAccessLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamAccessLogsMessage, StreamAccessLogsResponse], error)
}

type accessLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessLogServiceClient(cc grpc.ClientConnInterface) AccessLogServiceClient {
	return &accessLogServiceClient{cc}
}

func (c *accessLogServiceClient) StreamAccessLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamAccessLogsMessage, StreamAccessLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccessLogService_ServiceDesc.Streams[0], AccessLogService_StreamAccessLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAccessLogsMessage, StreamAccessLogsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccessLogService_StreamAccessLogsClient = grpc.ClientStreamingClient[StreamAccessLogsMessage, StreamAccessLogsResponse]

// AccessLogServiceServer is the server API for AccessLogService service.
// All implementations must embed UnimplementedAccessLogServiceServer
// for forward compatibility.
//
// Service for streaming access logs from Envoy to an access log server.
type AccessLogServiceServer interface {
	// Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
	// response to be sent as nothing would be done in the case of failure. The server should
	// disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
	// API for "critical" access logs in which Envoy will buffer access logs for some period of time
	// until it gets an ACK so it could then retry. This API is designed for high throughput with the
	// expectation that it might be lossy.
	StreamAccessLogs(grpc.ClientStreamingServer[StreamAccessLogsMessage, StreamAccessLogsResponse]) error
	mustEmbedUnimplementedAccessLogServiceServer()
}

// UnimplementedAccessLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessLogServiceServer struct{}

func (UnimplementedAccessLogServiceServer) StreamAccessLogs(grpc.ClientStreamingServer[StreamAccessLogsMessage, StreamAccessLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAccessLogs not implemented")
}
func (UnimplementedAccessLogServiceServer) mustEmbedUnimplementedAccessLogServiceServer() {}
func (UnimplementedAccessLogServiceServer) testEmbeddedByValue()                          {}

// UnsafeAccessLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessLogServiceServer will
// result in compilation errors.
type UnsafeAccessLogServiceServer interface {
	mustEmbedUnimplementedAccessLogServiceServer()
}

func RegisterAccessLogServiceServer(s grpc.ServiceRegistrar, srv AccessLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessLogService_ServiceDesc, srv)
}

func _AccessLogService_StreamAccessLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccessLogServiceServer).StreamAccessLogs(&grpc.GenericServerStream[StreamAccessLogsMessage, StreamAccessLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccessLogService_StreamAccessLogsServer = grpc.ClientStreamingServer[StreamAccessLogsMessage, StreamAccessLogsResponse]

// AccessLogService_ServiceDesc is the grpc.ServiceDesc for AccessLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.accesslog.v2.AccessLogService",
	HandlerType: (*AccessLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAccessLogs",
			Handler:       _AccessLogService_StreamAccessLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/accesslog/v2/als.proto",
}
