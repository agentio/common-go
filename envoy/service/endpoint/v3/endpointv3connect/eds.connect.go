// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/endpoint/v3/eds.proto

package endpointv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v31 "github.com/agentio/common-go/envoy/service/discovery/v3"
	v3 "github.com/agentio/common-go/envoy/service/endpoint/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EndpointDiscoveryServiceName is the fully-qualified name of the EndpointDiscoveryService service.
	EndpointDiscoveryServiceName = "envoy.service.endpoint.v3.EndpointDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EndpointDiscoveryServiceStreamEndpointsProcedure is the fully-qualified name of the
	// EndpointDiscoveryService's StreamEndpoints RPC.
	EndpointDiscoveryServiceStreamEndpointsProcedure = "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints"
	// EndpointDiscoveryServiceDeltaEndpointsProcedure is the fully-qualified name of the
	// EndpointDiscoveryService's DeltaEndpoints RPC.
	EndpointDiscoveryServiceDeltaEndpointsProcedure = "/envoy.service.endpoint.v3.EndpointDiscoveryService/DeltaEndpoints"
	// EndpointDiscoveryServiceFetchEndpointsProcedure is the fully-qualified name of the
	// EndpointDiscoveryService's FetchEndpoints RPC.
	EndpointDiscoveryServiceFetchEndpointsProcedure = "/envoy.service.endpoint.v3.EndpointDiscoveryService/FetchEndpoints"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	endpointDiscoveryServiceServiceDescriptor               = v3.File_envoy_service_endpoint_v3_eds_proto.Services().ByName("EndpointDiscoveryService")
	endpointDiscoveryServiceStreamEndpointsMethodDescriptor = endpointDiscoveryServiceServiceDescriptor.Methods().ByName("StreamEndpoints")
	endpointDiscoveryServiceDeltaEndpointsMethodDescriptor  = endpointDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaEndpoints")
	endpointDiscoveryServiceFetchEndpointsMethodDescriptor  = endpointDiscoveryServiceServiceDescriptor.Methods().ByName("FetchEndpoints")
)

// EndpointDiscoveryServiceClient is a client for the
// envoy.service.endpoint.v3.EndpointDiscoveryService service.
type EndpointDiscoveryServiceClient interface {
	// The resource_names field in DiscoveryRequest specifies a list of clusters
	// to subscribe to updates for.
	StreamEndpoints(context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse]
	DeltaEndpoints(context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	FetchEndpoints(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewEndpointDiscoveryServiceClient constructs a client for the
// envoy.service.endpoint.v3.EndpointDiscoveryService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEndpointDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EndpointDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &endpointDiscoveryServiceClient{
		streamEndpoints: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+EndpointDiscoveryServiceStreamEndpointsProcedure,
			connect.WithSchema(endpointDiscoveryServiceStreamEndpointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deltaEndpoints: connect.NewClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse](
			httpClient,
			baseURL+EndpointDiscoveryServiceDeltaEndpointsProcedure,
			connect.WithSchema(endpointDiscoveryServiceDeltaEndpointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchEndpoints: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+EndpointDiscoveryServiceFetchEndpointsProcedure,
			connect.WithSchema(endpointDiscoveryServiceFetchEndpointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// endpointDiscoveryServiceClient implements EndpointDiscoveryServiceClient.
type endpointDiscoveryServiceClient struct {
	streamEndpoints *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
	deltaEndpoints  *connect.Client[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	fetchEndpoints  *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
}

// StreamEndpoints calls envoy.service.endpoint.v3.EndpointDiscoveryService.StreamEndpoints.
func (c *endpointDiscoveryServiceClient) StreamEndpoints(ctx context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse] {
	return c.streamEndpoints.CallBidiStream(ctx)
}

// DeltaEndpoints calls envoy.service.endpoint.v3.EndpointDiscoveryService.DeltaEndpoints.
func (c *endpointDiscoveryServiceClient) DeltaEndpoints(ctx context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse] {
	return c.deltaEndpoints.CallBidiStream(ctx)
}

// FetchEndpoints calls envoy.service.endpoint.v3.EndpointDiscoveryService.FetchEndpoints.
func (c *endpointDiscoveryServiceClient) FetchEndpoints(ctx context.Context, req *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return c.fetchEndpoints.CallUnary(ctx, req)
}

// EndpointDiscoveryServiceHandler is an implementation of the
// envoy.service.endpoint.v3.EndpointDiscoveryService service.
type EndpointDiscoveryServiceHandler interface {
	// The resource_names field in DiscoveryRequest specifies a list of clusters
	// to subscribe to updates for.
	StreamEndpoints(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error
	DeltaEndpoints(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error
	FetchEndpoints(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewEndpointDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEndpointDiscoveryServiceHandler(svc EndpointDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	endpointDiscoveryServiceStreamEndpointsHandler := connect.NewBidiStreamHandler(
		EndpointDiscoveryServiceStreamEndpointsProcedure,
		svc.StreamEndpoints,
		connect.WithSchema(endpointDiscoveryServiceStreamEndpointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointDiscoveryServiceDeltaEndpointsHandler := connect.NewBidiStreamHandler(
		EndpointDiscoveryServiceDeltaEndpointsProcedure,
		svc.DeltaEndpoints,
		connect.WithSchema(endpointDiscoveryServiceDeltaEndpointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointDiscoveryServiceFetchEndpointsHandler := connect.NewUnaryHandler(
		EndpointDiscoveryServiceFetchEndpointsProcedure,
		svc.FetchEndpoints,
		connect.WithSchema(endpointDiscoveryServiceFetchEndpointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.endpoint.v3.EndpointDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EndpointDiscoveryServiceStreamEndpointsProcedure:
			endpointDiscoveryServiceStreamEndpointsHandler.ServeHTTP(w, r)
		case EndpointDiscoveryServiceDeltaEndpointsProcedure:
			endpointDiscoveryServiceDeltaEndpointsHandler.ServeHTTP(w, r)
		case EndpointDiscoveryServiceFetchEndpointsProcedure:
			endpointDiscoveryServiceFetchEndpointsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEndpointDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEndpointDiscoveryServiceHandler struct{}

func (UnimplementedEndpointDiscoveryServiceHandler) StreamEndpoints(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.endpoint.v3.EndpointDiscoveryService.StreamEndpoints is not implemented"))
}

func (UnimplementedEndpointDiscoveryServiceHandler) DeltaEndpoints(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.endpoint.v3.EndpointDiscoveryService.DeltaEndpoints is not implemented"))
}

func (UnimplementedEndpointDiscoveryServiceHandler) FetchEndpoints(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.endpoint.v3.EndpointDiscoveryService.FetchEndpoints is not implemented"))
}
