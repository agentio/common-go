// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: envoy/service/rate_limit_quota/v3/rlqs.proto

package rate_limit_quotav3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RateLimitQuotaService_StreamRateLimitQuotas_FullMethodName = "/envoy.service.rate_limit_quota.v3.RateLimitQuotaService/StreamRateLimitQuotas"
)

// RateLimitQuotaServiceClient is the client API for RateLimitQuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Defines the Rate Limit Quota Service (RLQS).
type RateLimitQuotaServiceClient interface {
	// Main communication channel: the data plane sends usage reports to the RLQS server,
	// and the server asynchronously responding with the assignments.
	StreamRateLimitQuotas(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RateLimitQuotaUsageReports, RateLimitQuotaResponse], error)
}

type rateLimitQuotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitQuotaServiceClient(cc grpc.ClientConnInterface) RateLimitQuotaServiceClient {
	return &rateLimitQuotaServiceClient{cc}
}

func (c *rateLimitQuotaServiceClient) StreamRateLimitQuotas(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RateLimitQuotaUsageReports, RateLimitQuotaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RateLimitQuotaService_ServiceDesc.Streams[0], RateLimitQuotaService_StreamRateLimitQuotas_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RateLimitQuotaUsageReports, RateLimitQuotaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateLimitQuotaService_StreamRateLimitQuotasClient = grpc.BidiStreamingClient[RateLimitQuotaUsageReports, RateLimitQuotaResponse]

// RateLimitQuotaServiceServer is the server API for RateLimitQuotaService service.
// All implementations must embed UnimplementedRateLimitQuotaServiceServer
// for forward compatibility.
//
// Defines the Rate Limit Quota Service (RLQS).
type RateLimitQuotaServiceServer interface {
	// Main communication channel: the data plane sends usage reports to the RLQS server,
	// and the server asynchronously responding with the assignments.
	StreamRateLimitQuotas(grpc.BidiStreamingServer[RateLimitQuotaUsageReports, RateLimitQuotaResponse]) error
	mustEmbedUnimplementedRateLimitQuotaServiceServer()
}

// UnimplementedRateLimitQuotaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRateLimitQuotaServiceServer struct{}

func (UnimplementedRateLimitQuotaServiceServer) StreamRateLimitQuotas(grpc.BidiStreamingServer[RateLimitQuotaUsageReports, RateLimitQuotaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRateLimitQuotas not implemented")
}
func (UnimplementedRateLimitQuotaServiceServer) mustEmbedUnimplementedRateLimitQuotaServiceServer() {}
func (UnimplementedRateLimitQuotaServiceServer) testEmbeddedByValue()                               {}

// UnsafeRateLimitQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimitQuotaServiceServer will
// result in compilation errors.
type UnsafeRateLimitQuotaServiceServer interface {
	mustEmbedUnimplementedRateLimitQuotaServiceServer()
}

func RegisterRateLimitQuotaServiceServer(s grpc.ServiceRegistrar, srv RateLimitQuotaServiceServer) {
	// If the following call pancis, it indicates UnimplementedRateLimitQuotaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RateLimitQuotaService_ServiceDesc, srv)
}

func _RateLimitQuotaService_StreamRateLimitQuotas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RateLimitQuotaServiceServer).StreamRateLimitQuotas(&grpc.GenericServerStream[RateLimitQuotaUsageReports, RateLimitQuotaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RateLimitQuotaService_StreamRateLimitQuotasServer = grpc.BidiStreamingServer[RateLimitQuotaUsageReports, RateLimitQuotaResponse]

// RateLimitQuotaService_ServiceDesc is the grpc.ServiceDesc for RateLimitQuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimitQuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.rate_limit_quota.v3.RateLimitQuotaService",
	HandlerType: (*RateLimitQuotaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRateLimitQuotas",
			Handler:       _RateLimitQuotaService_StreamRateLimitQuotas_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/rate_limit_quota/v3/rlqs.proto",
}
