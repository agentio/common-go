// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/listener/v3/lds.proto

package listenerv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v31 "github.com/agentio/common-go/envoy/service/discovery/v3"
	v3 "github.com/agentio/common-go/envoy/service/listener/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ListenerDiscoveryServiceName is the fully-qualified name of the ListenerDiscoveryService service.
	ListenerDiscoveryServiceName = "envoy.service.listener.v3.ListenerDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ListenerDiscoveryServiceDeltaListenersProcedure is the fully-qualified name of the
	// ListenerDiscoveryService's DeltaListeners RPC.
	ListenerDiscoveryServiceDeltaListenersProcedure = "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners"
	// ListenerDiscoveryServiceStreamListenersProcedure is the fully-qualified name of the
	// ListenerDiscoveryService's StreamListeners RPC.
	ListenerDiscoveryServiceStreamListenersProcedure = "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners"
	// ListenerDiscoveryServiceFetchListenersProcedure is the fully-qualified name of the
	// ListenerDiscoveryService's FetchListeners RPC.
	ListenerDiscoveryServiceFetchListenersProcedure = "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	listenerDiscoveryServiceServiceDescriptor               = v3.File_envoy_service_listener_v3_lds_proto.Services().ByName("ListenerDiscoveryService")
	listenerDiscoveryServiceDeltaListenersMethodDescriptor  = listenerDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaListeners")
	listenerDiscoveryServiceStreamListenersMethodDescriptor = listenerDiscoveryServiceServiceDescriptor.Methods().ByName("StreamListeners")
	listenerDiscoveryServiceFetchListenersMethodDescriptor  = listenerDiscoveryServiceServiceDescriptor.Methods().ByName("FetchListeners")
)

// ListenerDiscoveryServiceClient is a client for the
// envoy.service.listener.v3.ListenerDiscoveryService service.
type ListenerDiscoveryServiceClient interface {
	DeltaListeners(context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	StreamListeners(context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse]
	FetchListeners(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewListenerDiscoveryServiceClient constructs a client for the
// envoy.service.listener.v3.ListenerDiscoveryService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewListenerDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ListenerDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &listenerDiscoveryServiceClient{
		deltaListeners: connect.NewClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse](
			httpClient,
			baseURL+ListenerDiscoveryServiceDeltaListenersProcedure,
			connect.WithSchema(listenerDiscoveryServiceDeltaListenersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamListeners: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+ListenerDiscoveryServiceStreamListenersProcedure,
			connect.WithSchema(listenerDiscoveryServiceStreamListenersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchListeners: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+ListenerDiscoveryServiceFetchListenersProcedure,
			connect.WithSchema(listenerDiscoveryServiceFetchListenersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// listenerDiscoveryServiceClient implements ListenerDiscoveryServiceClient.
type listenerDiscoveryServiceClient struct {
	deltaListeners  *connect.Client[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	streamListeners *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
	fetchListeners  *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
}

// DeltaListeners calls envoy.service.listener.v3.ListenerDiscoveryService.DeltaListeners.
func (c *listenerDiscoveryServiceClient) DeltaListeners(ctx context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse] {
	return c.deltaListeners.CallBidiStream(ctx)
}

// StreamListeners calls envoy.service.listener.v3.ListenerDiscoveryService.StreamListeners.
func (c *listenerDiscoveryServiceClient) StreamListeners(ctx context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse] {
	return c.streamListeners.CallBidiStream(ctx)
}

// FetchListeners calls envoy.service.listener.v3.ListenerDiscoveryService.FetchListeners.
func (c *listenerDiscoveryServiceClient) FetchListeners(ctx context.Context, req *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return c.fetchListeners.CallUnary(ctx, req)
}

// ListenerDiscoveryServiceHandler is an implementation of the
// envoy.service.listener.v3.ListenerDiscoveryService service.
type ListenerDiscoveryServiceHandler interface {
	DeltaListeners(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error
	StreamListeners(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error
	FetchListeners(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewListenerDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewListenerDiscoveryServiceHandler(svc ListenerDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	listenerDiscoveryServiceDeltaListenersHandler := connect.NewBidiStreamHandler(
		ListenerDiscoveryServiceDeltaListenersProcedure,
		svc.DeltaListeners,
		connect.WithSchema(listenerDiscoveryServiceDeltaListenersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	listenerDiscoveryServiceStreamListenersHandler := connect.NewBidiStreamHandler(
		ListenerDiscoveryServiceStreamListenersProcedure,
		svc.StreamListeners,
		connect.WithSchema(listenerDiscoveryServiceStreamListenersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	listenerDiscoveryServiceFetchListenersHandler := connect.NewUnaryHandler(
		ListenerDiscoveryServiceFetchListenersProcedure,
		svc.FetchListeners,
		connect.WithSchema(listenerDiscoveryServiceFetchListenersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.listener.v3.ListenerDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ListenerDiscoveryServiceDeltaListenersProcedure:
			listenerDiscoveryServiceDeltaListenersHandler.ServeHTTP(w, r)
		case ListenerDiscoveryServiceStreamListenersProcedure:
			listenerDiscoveryServiceStreamListenersHandler.ServeHTTP(w, r)
		case ListenerDiscoveryServiceFetchListenersProcedure:
			listenerDiscoveryServiceFetchListenersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedListenerDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedListenerDiscoveryServiceHandler struct{}

func (UnimplementedListenerDiscoveryServiceHandler) DeltaListeners(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.listener.v3.ListenerDiscoveryService.DeltaListeners is not implemented"))
}

func (UnimplementedListenerDiscoveryServiceHandler) StreamListeners(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.listener.v3.ListenerDiscoveryService.StreamListeners is not implemented"))
}

func (UnimplementedListenerDiscoveryServiceHandler) FetchListeners(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.listener.v3.ListenerDiscoveryService.FetchListeners is not implemented"))
}
