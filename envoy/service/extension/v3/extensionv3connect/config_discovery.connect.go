// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/extension/v3/config_discovery.proto

package extensionv3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v31 "github.com/agentio/common-go/envoy/service/discovery/v3"
	v3 "github.com/agentio/common-go/envoy/service/extension/v3"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExtensionConfigDiscoveryServiceName is the fully-qualified name of the
	// ExtensionConfigDiscoveryService service.
	ExtensionConfigDiscoveryServiceName = "envoy.service.extension.v3.ExtensionConfigDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExtensionConfigDiscoveryServiceStreamExtensionConfigsProcedure is the fully-qualified name of the
	// ExtensionConfigDiscoveryService's StreamExtensionConfigs RPC.
	ExtensionConfigDiscoveryServiceStreamExtensionConfigsProcedure = "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs"
	// ExtensionConfigDiscoveryServiceDeltaExtensionConfigsProcedure is the fully-qualified name of the
	// ExtensionConfigDiscoveryService's DeltaExtensionConfigs RPC.
	ExtensionConfigDiscoveryServiceDeltaExtensionConfigsProcedure = "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs"
	// ExtensionConfigDiscoveryServiceFetchExtensionConfigsProcedure is the fully-qualified name of the
	// ExtensionConfigDiscoveryService's FetchExtensionConfigs RPC.
	ExtensionConfigDiscoveryServiceFetchExtensionConfigsProcedure = "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	extensionConfigDiscoveryServiceServiceDescriptor                      = v3.File_envoy_service_extension_v3_config_discovery_proto.Services().ByName("ExtensionConfigDiscoveryService")
	extensionConfigDiscoveryServiceStreamExtensionConfigsMethodDescriptor = extensionConfigDiscoveryServiceServiceDescriptor.Methods().ByName("StreamExtensionConfigs")
	extensionConfigDiscoveryServiceDeltaExtensionConfigsMethodDescriptor  = extensionConfigDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaExtensionConfigs")
	extensionConfigDiscoveryServiceFetchExtensionConfigsMethodDescriptor  = extensionConfigDiscoveryServiceServiceDescriptor.Methods().ByName("FetchExtensionConfigs")
)

// ExtensionConfigDiscoveryServiceClient is a client for the
// envoy.service.extension.v3.ExtensionConfigDiscoveryService service.
type ExtensionConfigDiscoveryServiceClient interface {
	StreamExtensionConfigs(context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse]
	DeltaExtensionConfigs(context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	FetchExtensionConfigs(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewExtensionConfigDiscoveryServiceClient constructs a client for the
// envoy.service.extension.v3.ExtensionConfigDiscoveryService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExtensionConfigDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExtensionConfigDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &extensionConfigDiscoveryServiceClient{
		streamExtensionConfigs: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+ExtensionConfigDiscoveryServiceStreamExtensionConfigsProcedure,
			connect.WithSchema(extensionConfigDiscoveryServiceStreamExtensionConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deltaExtensionConfigs: connect.NewClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse](
			httpClient,
			baseURL+ExtensionConfigDiscoveryServiceDeltaExtensionConfigsProcedure,
			connect.WithSchema(extensionConfigDiscoveryServiceDeltaExtensionConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchExtensionConfigs: connect.NewClient[v31.DiscoveryRequest, v31.DiscoveryResponse](
			httpClient,
			baseURL+ExtensionConfigDiscoveryServiceFetchExtensionConfigsProcedure,
			connect.WithSchema(extensionConfigDiscoveryServiceFetchExtensionConfigsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// extensionConfigDiscoveryServiceClient implements ExtensionConfigDiscoveryServiceClient.
type extensionConfigDiscoveryServiceClient struct {
	streamExtensionConfigs *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
	deltaExtensionConfigs  *connect.Client[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]
	fetchExtensionConfigs  *connect.Client[v31.DiscoveryRequest, v31.DiscoveryResponse]
}

// StreamExtensionConfigs calls
// envoy.service.extension.v3.ExtensionConfigDiscoveryService.StreamExtensionConfigs.
func (c *extensionConfigDiscoveryServiceClient) StreamExtensionConfigs(ctx context.Context) *connect.BidiStreamForClient[v31.DiscoveryRequest, v31.DiscoveryResponse] {
	return c.streamExtensionConfigs.CallBidiStream(ctx)
}

// DeltaExtensionConfigs calls
// envoy.service.extension.v3.ExtensionConfigDiscoveryService.DeltaExtensionConfigs.
func (c *extensionConfigDiscoveryServiceClient) DeltaExtensionConfigs(ctx context.Context) *connect.BidiStreamForClient[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse] {
	return c.deltaExtensionConfigs.CallBidiStream(ctx)
}

// FetchExtensionConfigs calls
// envoy.service.extension.v3.ExtensionConfigDiscoveryService.FetchExtensionConfigs.
func (c *extensionConfigDiscoveryServiceClient) FetchExtensionConfigs(ctx context.Context, req *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return c.fetchExtensionConfigs.CallUnary(ctx, req)
}

// ExtensionConfigDiscoveryServiceHandler is an implementation of the
// envoy.service.extension.v3.ExtensionConfigDiscoveryService service.
type ExtensionConfigDiscoveryServiceHandler interface {
	StreamExtensionConfigs(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error
	DeltaExtensionConfigs(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error
	FetchExtensionConfigs(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error)
}

// NewExtensionConfigDiscoveryServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExtensionConfigDiscoveryServiceHandler(svc ExtensionConfigDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	extensionConfigDiscoveryServiceStreamExtensionConfigsHandler := connect.NewBidiStreamHandler(
		ExtensionConfigDiscoveryServiceStreamExtensionConfigsProcedure,
		svc.StreamExtensionConfigs,
		connect.WithSchema(extensionConfigDiscoveryServiceStreamExtensionConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	extensionConfigDiscoveryServiceDeltaExtensionConfigsHandler := connect.NewBidiStreamHandler(
		ExtensionConfigDiscoveryServiceDeltaExtensionConfigsProcedure,
		svc.DeltaExtensionConfigs,
		connect.WithSchema(extensionConfigDiscoveryServiceDeltaExtensionConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	extensionConfigDiscoveryServiceFetchExtensionConfigsHandler := connect.NewUnaryHandler(
		ExtensionConfigDiscoveryServiceFetchExtensionConfigsProcedure,
		svc.FetchExtensionConfigs,
		connect.WithSchema(extensionConfigDiscoveryServiceFetchExtensionConfigsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExtensionConfigDiscoveryServiceStreamExtensionConfigsProcedure:
			extensionConfigDiscoveryServiceStreamExtensionConfigsHandler.ServeHTTP(w, r)
		case ExtensionConfigDiscoveryServiceDeltaExtensionConfigsProcedure:
			extensionConfigDiscoveryServiceDeltaExtensionConfigsHandler.ServeHTTP(w, r)
		case ExtensionConfigDiscoveryServiceFetchExtensionConfigsProcedure:
			extensionConfigDiscoveryServiceFetchExtensionConfigsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExtensionConfigDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExtensionConfigDiscoveryServiceHandler struct{}

func (UnimplementedExtensionConfigDiscoveryServiceHandler) StreamExtensionConfigs(context.Context, *connect.BidiStream[v31.DiscoveryRequest, v31.DiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.extension.v3.ExtensionConfigDiscoveryService.StreamExtensionConfigs is not implemented"))
}

func (UnimplementedExtensionConfigDiscoveryServiceHandler) DeltaExtensionConfigs(context.Context, *connect.BidiStream[v31.DeltaDiscoveryRequest, v31.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.extension.v3.ExtensionConfigDiscoveryService.DeltaExtensionConfigs is not implemented"))
}

func (UnimplementedExtensionConfigDiscoveryServiceHandler) FetchExtensionConfigs(context.Context, *connect.Request[v31.DiscoveryRequest]) (*connect.Response[v31.DiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.extension.v3.ExtensionConfigDiscoveryService.FetchExtensionConfigs is not implemented"))
}
