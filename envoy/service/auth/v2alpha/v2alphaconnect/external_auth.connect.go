// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/auth/v2alpha/external_auth.proto

package v2alphaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/agentio/common-go/envoy/service/auth/v2"
	v2alpha "github.com/agentio/common-go/envoy/service/auth/v2alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorizationName is the fully-qualified name of the Authorization service.
	AuthorizationName = "envoy.service.auth.v2alpha.Authorization"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorizationCheckProcedure is the fully-qualified name of the Authorization's Check RPC.
	AuthorizationCheckProcedure = "/envoy.service.auth.v2alpha.Authorization/Check"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authorizationServiceDescriptor     = v2alpha.File_envoy_service_auth_v2alpha_external_auth_proto.Services().ByName("Authorization")
	authorizationCheckMethodDescriptor = authorizationServiceDescriptor.Methods().ByName("Check")
)

// AuthorizationClient is a client for the envoy.service.auth.v2alpha.Authorization service.
type AuthorizationClient interface {
	// Performs authorization check based on the attributes associated with the
	// incoming request, and returns status `OK` or not `OK`.
	Check(context.Context, *connect.Request[v2.CheckRequest]) (*connect.Response[v2.CheckResponse], error)
}

// NewAuthorizationClient constructs a client for the envoy.service.auth.v2alpha.Authorization
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorizationClient{
		check: connect.NewClient[v2.CheckRequest, v2.CheckResponse](
			httpClient,
			baseURL+AuthorizationCheckProcedure,
			connect.WithSchema(authorizationCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationClient implements AuthorizationClient.
type authorizationClient struct {
	check *connect.Client[v2.CheckRequest, v2.CheckResponse]
}

// Check calls envoy.service.auth.v2alpha.Authorization.Check.
func (c *authorizationClient) Check(ctx context.Context, req *connect.Request[v2.CheckRequest]) (*connect.Response[v2.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// AuthorizationHandler is an implementation of the envoy.service.auth.v2alpha.Authorization
// service.
type AuthorizationHandler interface {
	// Performs authorization check based on the attributes associated with the
	// incoming request, and returns status `OK` or not `OK`.
	Check(context.Context, *connect.Request[v2.CheckRequest]) (*connect.Response[v2.CheckResponse], error)
}

// NewAuthorizationHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationHandler(svc AuthorizationHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationCheckHandler := connect.NewUnaryHandler(
		AuthorizationCheckProcedure,
		svc.Check,
		connect.WithSchema(authorizationCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.service.auth.v2alpha.Authorization/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationCheckProcedure:
			authorizationCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationHandler struct{}

func (UnimplementedAuthorizationHandler) Check(context.Context, *connect.Request[v2.CheckRequest]) (*connect.Response[v2.CheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.service.auth.v2alpha.Authorization.Check is not implemented"))
}
