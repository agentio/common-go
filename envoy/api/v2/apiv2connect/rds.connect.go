// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/api/v2/rds.proto

package apiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/agentio/common-go/envoy/api/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RouteDiscoveryServiceName is the fully-qualified name of the RouteDiscoveryService service.
	RouteDiscoveryServiceName = "envoy.api.v2.RouteDiscoveryService"
	// VirtualHostDiscoveryServiceName is the fully-qualified name of the VirtualHostDiscoveryService
	// service.
	VirtualHostDiscoveryServiceName = "envoy.api.v2.VirtualHostDiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RouteDiscoveryServiceStreamRoutesProcedure is the fully-qualified name of the
	// RouteDiscoveryService's StreamRoutes RPC.
	RouteDiscoveryServiceStreamRoutesProcedure = "/envoy.api.v2.RouteDiscoveryService/StreamRoutes"
	// RouteDiscoveryServiceDeltaRoutesProcedure is the fully-qualified name of the
	// RouteDiscoveryService's DeltaRoutes RPC.
	RouteDiscoveryServiceDeltaRoutesProcedure = "/envoy.api.v2.RouteDiscoveryService/DeltaRoutes"
	// RouteDiscoveryServiceFetchRoutesProcedure is the fully-qualified name of the
	// RouteDiscoveryService's FetchRoutes RPC.
	RouteDiscoveryServiceFetchRoutesProcedure = "/envoy.api.v2.RouteDiscoveryService/FetchRoutes"
	// VirtualHostDiscoveryServiceDeltaVirtualHostsProcedure is the fully-qualified name of the
	// VirtualHostDiscoveryService's DeltaVirtualHosts RPC.
	VirtualHostDiscoveryServiceDeltaVirtualHostsProcedure = "/envoy.api.v2.VirtualHostDiscoveryService/DeltaVirtualHosts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	routeDiscoveryServiceServiceDescriptor                       = v2.File_envoy_api_v2_rds_proto.Services().ByName("RouteDiscoveryService")
	routeDiscoveryServiceStreamRoutesMethodDescriptor            = routeDiscoveryServiceServiceDescriptor.Methods().ByName("StreamRoutes")
	routeDiscoveryServiceDeltaRoutesMethodDescriptor             = routeDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaRoutes")
	routeDiscoveryServiceFetchRoutesMethodDescriptor             = routeDiscoveryServiceServiceDescriptor.Methods().ByName("FetchRoutes")
	virtualHostDiscoveryServiceServiceDescriptor                 = v2.File_envoy_api_v2_rds_proto.Services().ByName("VirtualHostDiscoveryService")
	virtualHostDiscoveryServiceDeltaVirtualHostsMethodDescriptor = virtualHostDiscoveryServiceServiceDescriptor.Methods().ByName("DeltaVirtualHosts")
)

// RouteDiscoveryServiceClient is a client for the envoy.api.v2.RouteDiscoveryService service.
type RouteDiscoveryServiceClient interface {
	StreamRoutes(context.Context) *connect.BidiStreamForClient[v2.DiscoveryRequest, v2.DiscoveryResponse]
	DeltaRoutes(context.Context) *connect.BidiStreamForClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]
	FetchRoutes(context.Context, *connect.Request[v2.DiscoveryRequest]) (*connect.Response[v2.DiscoveryResponse], error)
}

// NewRouteDiscoveryServiceClient constructs a client for the envoy.api.v2.RouteDiscoveryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRouteDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RouteDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &routeDiscoveryServiceClient{
		streamRoutes: connect.NewClient[v2.DiscoveryRequest, v2.DiscoveryResponse](
			httpClient,
			baseURL+RouteDiscoveryServiceStreamRoutesProcedure,
			connect.WithSchema(routeDiscoveryServiceStreamRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deltaRoutes: connect.NewClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse](
			httpClient,
			baseURL+RouteDiscoveryServiceDeltaRoutesProcedure,
			connect.WithSchema(routeDiscoveryServiceDeltaRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchRoutes: connect.NewClient[v2.DiscoveryRequest, v2.DiscoveryResponse](
			httpClient,
			baseURL+RouteDiscoveryServiceFetchRoutesProcedure,
			connect.WithSchema(routeDiscoveryServiceFetchRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// routeDiscoveryServiceClient implements RouteDiscoveryServiceClient.
type routeDiscoveryServiceClient struct {
	streamRoutes *connect.Client[v2.DiscoveryRequest, v2.DiscoveryResponse]
	deltaRoutes  *connect.Client[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]
	fetchRoutes  *connect.Client[v2.DiscoveryRequest, v2.DiscoveryResponse]
}

// StreamRoutes calls envoy.api.v2.RouteDiscoveryService.StreamRoutes.
func (c *routeDiscoveryServiceClient) StreamRoutes(ctx context.Context) *connect.BidiStreamForClient[v2.DiscoveryRequest, v2.DiscoveryResponse] {
	return c.streamRoutes.CallBidiStream(ctx)
}

// DeltaRoutes calls envoy.api.v2.RouteDiscoveryService.DeltaRoutes.
func (c *routeDiscoveryServiceClient) DeltaRoutes(ctx context.Context) *connect.BidiStreamForClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse] {
	return c.deltaRoutes.CallBidiStream(ctx)
}

// FetchRoutes calls envoy.api.v2.RouteDiscoveryService.FetchRoutes.
func (c *routeDiscoveryServiceClient) FetchRoutes(ctx context.Context, req *connect.Request[v2.DiscoveryRequest]) (*connect.Response[v2.DiscoveryResponse], error) {
	return c.fetchRoutes.CallUnary(ctx, req)
}

// RouteDiscoveryServiceHandler is an implementation of the envoy.api.v2.RouteDiscoveryService
// service.
type RouteDiscoveryServiceHandler interface {
	StreamRoutes(context.Context, *connect.BidiStream[v2.DiscoveryRequest, v2.DiscoveryResponse]) error
	DeltaRoutes(context.Context, *connect.BidiStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error
	FetchRoutes(context.Context, *connect.Request[v2.DiscoveryRequest]) (*connect.Response[v2.DiscoveryResponse], error)
}

// NewRouteDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRouteDiscoveryServiceHandler(svc RouteDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routeDiscoveryServiceStreamRoutesHandler := connect.NewBidiStreamHandler(
		RouteDiscoveryServiceStreamRoutesProcedure,
		svc.StreamRoutes,
		connect.WithSchema(routeDiscoveryServiceStreamRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routeDiscoveryServiceDeltaRoutesHandler := connect.NewBidiStreamHandler(
		RouteDiscoveryServiceDeltaRoutesProcedure,
		svc.DeltaRoutes,
		connect.WithSchema(routeDiscoveryServiceDeltaRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routeDiscoveryServiceFetchRoutesHandler := connect.NewUnaryHandler(
		RouteDiscoveryServiceFetchRoutesProcedure,
		svc.FetchRoutes,
		connect.WithSchema(routeDiscoveryServiceFetchRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.api.v2.RouteDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RouteDiscoveryServiceStreamRoutesProcedure:
			routeDiscoveryServiceStreamRoutesHandler.ServeHTTP(w, r)
		case RouteDiscoveryServiceDeltaRoutesProcedure:
			routeDiscoveryServiceDeltaRoutesHandler.ServeHTTP(w, r)
		case RouteDiscoveryServiceFetchRoutesProcedure:
			routeDiscoveryServiceFetchRoutesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRouteDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRouteDiscoveryServiceHandler struct{}

func (UnimplementedRouteDiscoveryServiceHandler) StreamRoutes(context.Context, *connect.BidiStream[v2.DiscoveryRequest, v2.DiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.api.v2.RouteDiscoveryService.StreamRoutes is not implemented"))
}

func (UnimplementedRouteDiscoveryServiceHandler) DeltaRoutes(context.Context, *connect.BidiStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.api.v2.RouteDiscoveryService.DeltaRoutes is not implemented"))
}

func (UnimplementedRouteDiscoveryServiceHandler) FetchRoutes(context.Context, *connect.Request[v2.DiscoveryRequest]) (*connect.Response[v2.DiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("envoy.api.v2.RouteDiscoveryService.FetchRoutes is not implemented"))
}

// VirtualHostDiscoveryServiceClient is a client for the envoy.api.v2.VirtualHostDiscoveryService
// service.
type VirtualHostDiscoveryServiceClient interface {
	DeltaVirtualHosts(context.Context) *connect.BidiStreamForClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]
}

// NewVirtualHostDiscoveryServiceClient constructs a client for the
// envoy.api.v2.VirtualHostDiscoveryService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualHostDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualHostDiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &virtualHostDiscoveryServiceClient{
		deltaVirtualHosts: connect.NewClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse](
			httpClient,
			baseURL+VirtualHostDiscoveryServiceDeltaVirtualHostsProcedure,
			connect.WithSchema(virtualHostDiscoveryServiceDeltaVirtualHostsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualHostDiscoveryServiceClient implements VirtualHostDiscoveryServiceClient.
type virtualHostDiscoveryServiceClient struct {
	deltaVirtualHosts *connect.Client[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]
}

// DeltaVirtualHosts calls envoy.api.v2.VirtualHostDiscoveryService.DeltaVirtualHosts.
func (c *virtualHostDiscoveryServiceClient) DeltaVirtualHosts(ctx context.Context) *connect.BidiStreamForClient[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse] {
	return c.deltaVirtualHosts.CallBidiStream(ctx)
}

// VirtualHostDiscoveryServiceHandler is an implementation of the
// envoy.api.v2.VirtualHostDiscoveryService service.
type VirtualHostDiscoveryServiceHandler interface {
	DeltaVirtualHosts(context.Context, *connect.BidiStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error
}

// NewVirtualHostDiscoveryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualHostDiscoveryServiceHandler(svc VirtualHostDiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualHostDiscoveryServiceDeltaVirtualHostsHandler := connect.NewBidiStreamHandler(
		VirtualHostDiscoveryServiceDeltaVirtualHostsProcedure,
		svc.DeltaVirtualHosts,
		connect.WithSchema(virtualHostDiscoveryServiceDeltaVirtualHostsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/envoy.api.v2.VirtualHostDiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualHostDiscoveryServiceDeltaVirtualHostsProcedure:
			virtualHostDiscoveryServiceDeltaVirtualHostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualHostDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualHostDiscoveryServiceHandler struct{}

func (UnimplementedVirtualHostDiscoveryServiceHandler) DeltaVirtualHosts(context.Context, *connect.BidiStream[v2.DeltaDiscoveryRequest, v2.DeltaDiscoveryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("envoy.api.v2.VirtualHostDiscoveryService.DeltaVirtualHosts is not implemented"))
}
