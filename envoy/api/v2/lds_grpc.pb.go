// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: envoy/api/v2/lds.proto

package apiv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListenerDiscoveryService_DeltaListeners_FullMethodName  = "/envoy.api.v2.ListenerDiscoveryService/DeltaListeners"
	ListenerDiscoveryService_StreamListeners_FullMethodName = "/envoy.api.v2.ListenerDiscoveryService/StreamListeners"
	ListenerDiscoveryService_FetchListeners_FullMethodName  = "/envoy.api.v2.ListenerDiscoveryService/FetchListeners"
)

// ListenerDiscoveryServiceClient is the client API for ListenerDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Envoy instance initiates an RPC at startup to discover a list of
// listeners. Updates are delivered via streaming from the LDS server and
// consist of a complete update of all listeners. Existing connections will be
// allowed to drain from listeners that are no longer present.
type ListenerDiscoveryServiceClient interface {
	DeltaListeners(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeltaDiscoveryRequest, DeltaDiscoveryResponse], error)
	StreamListeners(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DiscoveryRequest, DiscoveryResponse], error)
	FetchListeners(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type listenerDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerDiscoveryServiceClient(cc grpc.ClientConnInterface) ListenerDiscoveryServiceClient {
	return &listenerDiscoveryServiceClient{cc}
}

func (c *listenerDiscoveryServiceClient) DeltaListeners(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeltaDiscoveryRequest, DeltaDiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ListenerDiscoveryService_ServiceDesc.Streams[0], ListenerDiscoveryService_DeltaListeners_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeltaDiscoveryRequest, DeltaDiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ListenerDiscoveryService_DeltaListenersClient = grpc.BidiStreamingClient[DeltaDiscoveryRequest, DeltaDiscoveryResponse]

func (c *listenerDiscoveryServiceClient) StreamListeners(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DiscoveryRequest, DiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ListenerDiscoveryService_ServiceDesc.Streams[1], ListenerDiscoveryService_StreamListeners_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DiscoveryRequest, DiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ListenerDiscoveryService_StreamListenersClient = grpc.BidiStreamingClient[DiscoveryRequest, DiscoveryResponse]

func (c *listenerDiscoveryServiceClient) FetchListeners(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, ListenerDiscoveryService_FetchListeners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerDiscoveryServiceServer is the server API for ListenerDiscoveryService service.
// All implementations must embed UnimplementedListenerDiscoveryServiceServer
// for forward compatibility.
//
// The Envoy instance initiates an RPC at startup to discover a list of
// listeners. Updates are delivered via streaming from the LDS server and
// consist of a complete update of all listeners. Existing connections will be
// allowed to drain from listeners that are no longer present.
type ListenerDiscoveryServiceServer interface {
	DeltaListeners(grpc.BidiStreamingServer[DeltaDiscoveryRequest, DeltaDiscoveryResponse]) error
	StreamListeners(grpc.BidiStreamingServer[DiscoveryRequest, DiscoveryResponse]) error
	FetchListeners(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
	mustEmbedUnimplementedListenerDiscoveryServiceServer()
}

// UnimplementedListenerDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListenerDiscoveryServiceServer struct{}

func (UnimplementedListenerDiscoveryServiceServer) DeltaListeners(grpc.BidiStreamingServer[DeltaDiscoveryRequest, DeltaDiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeltaListeners not implemented")
}
func (UnimplementedListenerDiscoveryServiceServer) StreamListeners(grpc.BidiStreamingServer[DiscoveryRequest, DiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamListeners not implemented")
}
func (UnimplementedListenerDiscoveryServiceServer) FetchListeners(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchListeners not implemented")
}
func (UnimplementedListenerDiscoveryServiceServer) mustEmbedUnimplementedListenerDiscoveryServiceServer() {
}
func (UnimplementedListenerDiscoveryServiceServer) testEmbeddedByValue() {}

// UnsafeListenerDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerDiscoveryServiceServer will
// result in compilation errors.
type UnsafeListenerDiscoveryServiceServer interface {
	mustEmbedUnimplementedListenerDiscoveryServiceServer()
}

func RegisterListenerDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ListenerDiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedListenerDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListenerDiscoveryService_ServiceDesc, srv)
}

func _ListenerDiscoveryService_DeltaListeners_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerDiscoveryServiceServer).DeltaListeners(&grpc.GenericServerStream[DeltaDiscoveryRequest, DeltaDiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ListenerDiscoveryService_DeltaListenersServer = grpc.BidiStreamingServer[DeltaDiscoveryRequest, DeltaDiscoveryResponse]

func _ListenerDiscoveryService_StreamListeners_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerDiscoveryServiceServer).StreamListeners(&grpc.GenericServerStream[DiscoveryRequest, DiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ListenerDiscoveryService_StreamListenersServer = grpc.BidiStreamingServer[DiscoveryRequest, DiscoveryResponse]

func _ListenerDiscoveryService_FetchListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerDiscoveryServiceServer).FetchListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListenerDiscoveryService_FetchListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerDiscoveryServiceServer).FetchListeners(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListenerDiscoveryService_ServiceDesc is the grpc.ServiceDesc for ListenerDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListenerDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.ListenerDiscoveryService",
	HandlerType: (*ListenerDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchListeners",
			Handler:    _ListenerDiscoveryService_FetchListeners_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeltaListeners",
			Handler:       _ListenerDiscoveryService_DeltaListeners_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamListeners",
			Handler:       _ListenerDiscoveryService_StreamListeners_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/api/v2/lds.proto",
}
